;;ifndef ALIO_SOCKETLIB
;;def ALIO_SOCKETLIB
;;include static <stdlib>
# Depedencies:
# stdlib
# Credit and Reasources:
# - C Web server: https://rosettacode.org/wiki/Hello_world/Web_server#C
# - C Sockets Library: https://github.com/torvalds/linux/blob/master/include/linux/socket.h

# Adress families
;;define AF_UNSPEC 0
;;define AF_UNIX 1
;;define AF_LOCAL 1
;;define AF_INET 2
;;define AF_AX25 3
;;define AF_IPX 4
;;define AF_APPLETALK 5
;;define AF_NETROM 6
;;define AF_BRIDGE 7
;;define AF_ATMPVC 8
;;define AF_X25 9
;;define AF_INET6 10
;;define AF_ROSE 11
;;define AF_DECnet 12
;;define AF_NETBEUI 13
;;define AF_SECURITY 14
;;define AF_KEY 15
;;define AF_NETLINK 16
;;define AF_ROUTE 16
;;define AF_PACKET 17
;;define AF_ASH 18
;;define AF_ECONET 19
;;define AF_ATMSVC 20
;;define AF_RDS 21
;;define AF_SNA 22
;;define AF_IRDA 23
;;define AF_PPPOX 24
;;define AF_WANPIPE 25
;;define AF_LLC 26
;;define AF_IB 27
;;define AF_MPLS 28
;;define AF_CAN 29
;;define AF_TIPC 30
;;define AF_BLUETOOTH 31
;;define AF_IUCV 32
;;define AF_RXRPC 33
;;define AF_ISDN 34
;;define AF_PHONET 35
;;define AF_IEEE802154 36
;;define AF_CAIF 37
;;define AF_ALG 38
;;define AF_NFC 39
;;define AF_VSOCK 40
;;define AF_KCM 41
;;define AF_QIPCRTR 42
;;define AF_SMC 43
;;define AF_XDP 44
;;define AF_MCTP 45
;;define AF_MAX 46

;;define SIZEOF_SOCKADDR 16
;;define INADDR_ANY 0
;;define SOCK_STREAM 1
;;define SOL_SOCKET 1
;;define SO_REUSEADDR 2

struct sockaddr_in
begin
  short sin_family
  short port
  long sin_addr
  long sin_zero
end

struct sockaddr
begin
  short sa_family
  string sa_data[14]
end

proc socket
in uint domain
in uint type
in uint protocall
out uint sock
begin
  sock syscall(NRSYS_SOCKET domain type protocall)
  if(sock<0)
    char newline 10
    string error "Failed to open socket."
    ptr __error &error
    SYS_write(STDERR __error 23)
    SYS_exit(1)
  end
end

proc setsockopt
in uint sock
in uint level
in uint optname
in ptr optval
in uint optlen
begin
  uint err syscall(NRSYS_SETSOCKOPT sock level optname optval optlen)
  if(err<0)
    char newline 10
    string error "Failed to set socket option."
    ptr __error &error
    SYS_write(STDERR __error 29)
    SYS_exit(1)
  end
end

proc bind
in uint sock
in ptr sockadrr
in uint addrlen
begin
  uint err syscall(NRSYS_BIND sock sockadrr addrlen)
  if(err<0)
    char newline 10
    string error "Failed to bind socket."
    ptr __error &error
    SYS_write(STDERR __error 23)
    __print_error(err)
    printc(STDERR 10)
    SYS_closefd(sock)
    SYS_exit(1)
  end
end

proc listen
in uint sock
in uint backlog
begin
  uint err syscall(NRSYS_LISTEN sock backlog)
  if(err<0)
    char newline 10
    string error "Failed to listen to socket."
    ptr __error &error
    SYS_write(STDERR __error 28)
    SYS_exit(1)
  end
end

proc accept
in uint sock
in ptr sockadrr
in uint addrlen
out uint fd
begin
  fd syscall(NRSYS_ACCEPT sock sockadrr addrlen)
  if(fd<0)
    char null 0
    char nl 10
    string error "Failed to accept."
    ptr __error &error
    prints(STDERR __error)
    __print_error(fd)
    printc(STDERR 10)
    SYS_exit(1)
  end
end

proc bitswap16
in short x
out short y
begin
  __asm(
  "  movzx eax, word [rbp-2]"
  "  shr ax, 8"
  "  mov edx, eax"
  "  movzx eax, word [rbp-2]"
  "  sal eax, 8"
  "  or eax, edx"
  "  mov word [rbp-6], ax"
  )
end

;;fi